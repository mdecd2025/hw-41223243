<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41223243/content/index.html">https://mdecd2025.github.io/hw-41223243/content/index.html</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223243"></a><a href="https://github.com/mdecd2025/hw-41223243">https://github.com/mdecd2025/hw-41223243</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p></p>
<h2>repo</h2>
<p><img alt="" height="216" src="/images/螢幕擷取畫面 2025-04-20 124134.png" width="618"/></p>
<p>除了上學期所使用的python310外 還額外新增了python313。</p><h1>Tasks</h1>
<p>???</p>
<h2>task1</h2>
<p>組員名單:<a href="https://github.com/mdecd2025/hw-leeshaowei0716">41223221</a>、<a href="https://github.com/mdecd2025/hw-41223212">41223212</a>、<a href="https://github.com/mdecd2025/hw-41223211">41223211</a>、<a href="https://github.com/mdecd2025/hw-41223243">41223243</a>、<a href="https://github.com/mdecd2025/hw-41223245">41223245</a>、<a href="https://github.com/mdecd2025/hw-41223251">41223251</a>。</p>
<p>首先是初版，這個版本有些問題，就是他會額外找出兩個不相關的，第一個是scrm-1與github.com，而且他無法根據使用者的名稱來自動修改網址。以我的為例:<a href="https://github.com/mdecd2025/hw-41223243我的能夠成">https://github.com/mdecd2025/hw-41223243</a></p>
<p>我的能跑出來是因為我的使用者名稱是41223243，而我們的組員當中有些人的使用者名稱不等於學號，所以拿第一版去跑Brython，他會假設所有人都是<a href="https://github.com/mdecd2025/hw-學號這個格式，">https://github.com/mdecd2025/hw-學號 </a>這個樣子，那如果hw-後方不是學號他就讀不到。</p>
<p>然後是二版，二版解決了跳出不相干人員的問題，但第二個問題還是沒有解決，所以以這個東西為基準，我延伸出了第三版。</p>
<p>三版算是一個比較折衷的作法，他能根據帳號去讀取使用者的名稱，如果使用者名稱不等於學號時，那他就會根據使用者名稱去修改hw-的後綴，假設我的使用者名稱是41223243，與帳號相同則hw-學號，而當兩者不同時，他會根據使用者名稱去自動修改成hw-使用者名稱。</p>
<p>(以下為AI解釋)</p>
<p>這段程式碼是基於 <strong data-end="20" data-start="9">Brython</strong> 開發的，目的是從一個指定的 URL (<code data-end="68" data-start="40">https://mde.tw/list/2b.txt</code>) 讀取學員的學號與帳號資料，並根據提供的學號清單顯示每位學員的帳號與對應的 GitHub 倉儲連結。如果帳號名稱與學號不一致，它會使用帳號名稱來生成 GitHub 倉儲 URL，反之則使用學號生成 URL。</p>
<p>以當前來說是夠用的。</p>
<p>以下為三版。</p>
<p> </p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, window
   
# 設定資料來源 URL
url = "https://mde.tw/list/2b.txt"
   
# 特定學員的學號列表
target_student_ids = ["41223243", "41223221", "41223211", "41223245", "41223251", "41223212"]  # 您指定的學號
   
# 利用 AJAX 來讀取遠端資料
def fetch_data():
    # 使用 window.XMLHttpRequest 發送 HTTP GET 請求來讀取資料
    xhr = window.XMLHttpRequest.new()
    xhr.open("GET", url, True)
       
    # 定義資料載入完成後的處理邏輯
    def onload(event):
        # 檢查 HTTP 請求是否成功
        if xhr.status == 200:
            # 取得返回的資料
            data = xhr.responseText.splitlines()
               
            # 進行診斷，確保資料格式正確
            print(f"載入的資料：{data}")
   
            # 跳過標題行，獲取有效學員資料
            all_stud = data[1:]  # 跳過標題行
            print(f"有效學員資料：{all_stud}")
   
            # 顯示資料
            brython_div1 = document["brython_div1"]
   
            # 清空顯示區域，避免重複顯示
            brython_div1.clear()
   
            # 顯示特定學員資料及超連結
            found_count = 0  # 記錄找到的學員數量
   
            for idx, stud in enumerate(all_stud, 1):
                # 假設每一行資料格式為 "學號 帳號"
                stud_info = stud.strip().split()
                if len(stud_info) == 2:  # 確保格式正確
                    student_id, account = stud_info
                       
                    # 檢查該學號是否在目標學號列表中
                    if student_id in target_student_ids:
                        # 檢查學號與帳號名稱是否一致
                        if not account.startswith(f"hw-{student_id}"):
                            # 如果學號與帳號名稱不一致，將倉儲 URL 改為 hw-帳號
                            link = f"https://github.com/mdecd2025/hw-{account}"
                        else:
                            # 如果一致，使用學號來生成倉儲 URL
                            link = f"https://github.com/mdecd2025/hw-{student_id}"
                           
                        brython_div1 &lt;= html.BR()
                        brython_div1 &lt;= f"{idx}. 學號: {student_id} 帳號: " + html.A(account, href=link)
   
                        found_count += 1
   
            # 如果沒有找到學員資料，顯示提示信息
            if found_count == 0:
                brython_div1 &lt;= html.BR()
                brython_div1 &lt;= "未找到指定學號的資料。"
   
    # 設定載入完成時的回呼
    xhr.bind("load", onload)
    xhr.send()
   
# 進行資料讀取
fetch_data()</pre>
<p><br/><br/></p>
<p><br/><br/></p>
<p></p>
<h2>task2</h2>
<p>以ipv6位置開啟近端。</p>
<p><img alt="" height="192" src="/images/螢幕擷取畫面 2025-03-11 112011.png" width="580"/></p>
<h2>task3</h2>
<p>利用cmd開啟並編輯動態倉儲。</p>
<p><img alt="" height="242" src="/images/螢幕擷取畫面 2025-03-18 084344.png" width="800"/></p>
<p>外部連結改為IPV6的指定位置。</p>
<p>靜態網站 端口:8000 <a href="https://[2001:288:6004:17:fff1:cd25:0:b053]:8443/content/index.html">靜態網站</a></p>
<p><img alt="" height="327" src="/images/螢幕擷取畫面 2025-03-18 105820.png" width="800"/></p>
<p><a href="/downloads/重要.zip">修改的內容</a></p>
<p>上方壓縮檔包含三個被我更改的.py 是讓近端的網址變成指定ipv6</p>
<p>本人IPV6:2001:288:6004:17:fff1:cd25:0:b053</p>
<p>而靜態網站的端口則使用了8000與8443兩個 不論哪種都能看見靜態網站內容，且內容一致。</p>
<h2>task4</h2>
<h2>task5</h2>
<h2>task6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3IBjiNI6vq4?si=JDIRYozS9gNS3QhH" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>好難<br/>補上影片中未模擬的部分 <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/C6RJA2p2-ss?si=0b2tNsgx8VoAHfl1" title="YouTube video player" width="560"></iframe> <br/><br/></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/PqlUI7qmsds?si=6eLmgoGC0cYA3AOz" title="YouTube video player" width="560"></iframe></p>
<p>心得:套用上HW1的概念，把box用mesh取代，就會容易上許多了，我最開始搞不懂的是，為甚麼尺寸進到webots理會變成40M，導致模擬不正常，只會自由落體，有改尺寸後就正常多了。</p>
<p></p><h3>平面四連桿</h3>
<p>所有零件檔:<a href="/downloads/4連桿零件及本體.zip">4連桿零件及本體.zip</a><br/>此為壓縮檔，解壓後所獲得的內容含6個零件，1個線檔與1個組合檔。</p>
<p>影片內容 <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/In0v2c-fJpA?si=Yq9qxUl_wM5Q7gdr" title="YouTube video player" width="560"></iframe></p>
<p></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p>操作影片，含模擬。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/03EhcySobtc?si=6vJ5YIrQ_paDt4IN" title="YouTube video player" width="560"></iframe></p>
<p>心得:與HW2雷同，比較熟悉後就不覺得特別難，困難點是在裝配時的數值調整。</p>
<p></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:第一周:創建倉儲、第二周到第三周:<span>各個github前置作業以及班級list整理學習<br/>第四周:solvespace及webot四連桿練習<br/>第五、六周:webots練習。</span></p>
<p>各週網頁內容:<a href="https://mdecd2025.github.io/hw-41223243/content/task1.html">task1</a>、<a href="https://mdecd2025.github.io/hw-41223243/content/task2.html">task2</a>、<a href="https://mdecd2025.github.io/hw-41223243/content/task3.html">task3</a>、<a href="https://mdecd2025.github.io/hw-41223243/content/HW1.html">HW1</a>、<a href="https://mdecd2025.github.io/hw-41223243/content/%E5%B9%B3%E9%9D%A2%E5%9B%9B%E9%80%A3%E6%A1%BF.html">平面四連桿</a>、<a href="https://mdecd2025.github.io/hw-41223243/content/repo.html">repo</a></p>
<p>期中心得:老實說目前所使用的webots 我個人覺得上手難度、使用方便的程度都遠不如上學期所使用的CoppeliaSim。</p>
<p>光是那個場景樹建立的關係一旦過多，就足以讓人看的眼睛痛，而且匯入檔案、模擬功能我也覺得不如CoppeliaSim<br/><br/>光是學怎麼使用webots就學到快要中風，總結來說，期中我認為處理的不好，進度落後，但很多時候我真的是，<br/><br/>想做一些作業，但看著webots的使用介面，我就只能發呆，而且webots還很容易閃退，這也是導致進度落後的原因之一。</p>
<p>所以這次的期中自評影片我無法拍攝出太多東西，很多時候我光要弄懂就得耗上數個小時，我不可能讓影片已好幾個小時的形式拍攝，所以期中自評影片就大略展示我所做的東西。</p>
<p>期中自評影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/IHJXmbsWl28?si=L4ZbDEx2_yUJYWFH" title="YouTube video player" width="560"></iframe></p>
<p>大略展示我所完成的作業，因為進度落後加上排錯中，故HW2尚未完成。</p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41223243</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RBXYfik3aLY?si=fUSpR2aLyh6vX-tA" title="YouTube video player" width="560"></iframe></p>
<p>操作流程:</p>
<p>建造一個robot，然後於children中增加兩個hinge joint與1個solid。</p>
<p>於solid的部分，將其改名為base，並於solid的<span>children，右鍵新增一個shape，然後於geometry處對他按右鍵新增</span><span>box，將X的部分調為1米。</span></p>
<p><span>※之後將不再贅述建立box的步驟。</span></p>
<p><span>任選一hinge joint，將選擇的hinge joint改名為hinge joint1，另一個改名為hinge joint4。<br/></span></p>
<p>進入hinge joint1的主線程下方，選擇它的endpoint右鍵新增<span>solid，然後調整數值，如下圖。</span></p>
<p><span><img alt="" height="92" src="/images/1.png" width="255"/></span></p>
<p><span>※注意rotation的部分是需要根據學號來進行調整，本人最後兩碼43，轉成rad就是0.7505rad。</span></p>
<p><span>然後children處新增pose與hinge joint，將hinge joint改名為joint2。</span></p>
<p><span></span>pose與其shape中的box如下</p>
<p>一號link</p>
<p><img alt="" height="285" src="/images/2.png" width="350"/></p>
<p>然後是joint2的部分與joint1的步驟相同，一樣在children新增solid然後建立pose(box中心)以及一個hinge joint，然後改名為joint3，然後建立第三個box。</p>
<p>二號link(下方第二章圖是短桿部分的設定)</p>
<p><img alt="" height="231" src="/images/3.png" width="266"/><img alt="" height="233" src="/images/4.png" width="250"/></p>
<p>三號link</p>
<p><img alt="" height="267" src="/images/5.png" width="353"/></p>
<p>至此box部分結束，接著開始設置jointparameters部分。</p>
<p>joint1的部分</p>
<p><img alt="" height="90" src="/images/6.png" width="347"/></p>
<p>除此之外，還要再joint1放置一個旋轉馬達，並命名為motor(控制程式中的命名)</p>
<p>joint2的部分</p>
<p><img alt="" height="88" src="/images/7.png" width="331"/></p>
<p>joint3的部分</p>
<p><img alt="" height="90" src="/images/8.png" width="308"/></p>
<p>然後是幫link1、link2、link3建立boundingObject</p>
<p>link1的boundingObject</p>
<p><img alt="" height="162" src="/images/9.png" width="277"/></p>
<p><span>link2的</span><span>boundingObject</span></p>
<p><span><img alt="" height="164" src="/images/10.png" width="242"/></span></p>
<p><span>link3的<span>boundingObject</span></span></p>
<p><span><span><img alt="" height="169" src="/images/11.png" width="297"/></span></span></p>
<p>以上設置完成後套入<a href="/downloads/fourbar_controller6.zip">這個控制程式</a>(注意請務必放置於controllers當中，且程式名稱需與資料夾相同)然後在robot的controlle當中開啟即可以模擬。</p>
<p><img alt="" height="311" src="/images/12.png" width="264"/></p>
<p>心得:HW1的翻版，pose這個功能運用得當，然後知道該如何更改rotation並且知道angle換算rad就不會遇到太多問題。</p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<p>1.<span>依照個人學號的最後兩碼作為依據，我的連桿主動桿訂為1.43而在solve上改為143，浮桿為215，搖桿為233，基座距離為300。</span></p>
<p><span>2.依照線架構約束組裝完成後存檔，並輸出存檔一個stl檔</span></p>
<p><span>3.將stl使用"split_stl_to_obj_scale2"進行轉obj檔，在4link.stl這個地方做更改，改為自己取的名字.stl</span></p>
<p>4.進入webot後，先加入Robot群組</p>
<p>5.在Robot群組下的children加入兩個Solid作為base，再加入兩個Hingejoint一個做為joint1一個為joint4</p>
<p>6.webots的操作步驟皆路至於影片當中。與exam的操作相差不多，只是box變成由自己於其他CAD軟體中繪製的物件，看是要透過cadshape匯入obj檔案，又或是從shape-&gt;mesh匯入檔案，本人選擇後者，方便更改顏色。</p>
<p>7.著重提一下<span>jointparameters中的anchor數值的設置。joint1為0,0,0、joint2為1.0458,0.9753,0、joint3為1.8008,2.9884,0。這個數值可由solveSpace中進行確定，即joint的位置距離x,y,z軸的距離。</span></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Iniv79iY-Aw?si=XutzJKOwgFXswwsY" title="YouTube video player" width="560"></iframe></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>